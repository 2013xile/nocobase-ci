name: Build pro image

concurrency:
  group: ${{ github.workflow }}-${{ inputs.branch }}-${{ inputs.nocobase_pr_number }}-${{ inputs.pro_plugin }}-${{ inputs.pro_pr_number }}
  cancel-in-progress: true

run-name: Build pro image ${{ inputs.branch }}-${{ inputs.nocobase_pr_number }}-${{ inputs.pro_plugin }}-${{ inputs.pro_pr_number }}

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'base branch'
        required: true
      nocobase_pr_number:
        description: 'main repo pr number'
      pro_plugin:
        description: 'pro-plugins or plugin name (without plugin-)'
      pro_pr_number:
        description: 'pro repo pr number'
      checkRunId:
        description: 'check run id'

jobs:
  get-plugins:
    uses: nocobase/nocobase/.github/workflows/get-plugins.yml@main
    secrets: 
      NOCOBASE_APP_PRIVATE_KEY: ${{ secrets.NOCOBASE_APP_PRIVATE_KEY }}
  build-and-push:
    runs-on: ubuntu-latest
    needs: get-plugins
    services:
      verdaccio:
        image: verdaccio/verdaccio:5
        ports:
          - 4873:4873
    steps:
      - name: Get info
        id: get-info
        shell: bash
        run: |
          if [[ "${{ inputs.branch }}" == "next" ]]; then
            echo "proRepos=$(echo '${{ needs.get-plugins.outputs.beta-plugins }}')" >> $GITHUB_OUTPUT
          elif [[ "${{ inputs.branch }}" == "develop" ]]; then
            echo "proRepos=$(echo '${{ needs.get-plugins.outputs.alpha-plugins }}')" >> $GITHUB_OUTPUT
          else
            echo "proRepos=$(echo '${{ needs.get-plugins.outputs.rc-plugins }}')" >> $GITHUB_OUTPUT
          fi
          if [ -n "${{ inputs.pro_pr_number }}" ]; then
            if [[ "${{ inputs.pro_plugin }}" == "pro-plugins" ]]; then
              echo "imageTag=$(echo 'pr-${{ inputs.pro_pr_number }}-pro')" >> $GITHUB_OUTPUT
            else 
              echo "imageTag=$(echo 'pr-${{ inputs.pro_pr_number }}-${{ inputs.pro_plugin }}')" >> $GITHUB_OUTPUT
            fi
          elif [ -n "${{ inputs.nocobase_pr_number }}" ]; then
            echo "imageTag=$(echo 'pr-${{ inputs.nocobase_pr_number }}')" >> $GITHUB_OUTPUT
          else
            echo "imageTag=$(echo '${{ inputs.branch }}')" >> $GITHUB_OUTPUT
          fi
          if [[ "${{ inputs.pro_plugin }}" == "pro-plugins" ]]; then
            echo "repository=$(echo 'pro-plugins')" >> $GITHUB_OUTPUT
          elif [ -n "${{ inputs.pro_plugin }}" ]; then
            echo "repository=$(echo 'plugin-${{ inputs.pro_plugin }}')" >> $GITHUB_OUTPUT
          else
            echo "repository=$(echo 'nocobase')" >> $GITHUB_OUTPUT
          fi
      - uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ vars.NOCOBASE_APP_ID }}
          private-key: ${{ secrets.NOCOBASE_APP_PRIVATE_KEY }}
          owner: nocobase
          repositories: nocobase,pro-plugins,${{ steps.get-info.outputs.repository }},${{ join(fromJSON(needs.get-plugins.outputs.all-plugins), ',') }}
          skip-token-revoke: true
      - name: Checkout
        uses: actions/checkout@v3
        with:
          repository: nocobase/nocobase
          ref: ${{ inputs.branch }}
          token: ${{ steps.app-token.outputs.token }}
          submodules: true
      - name: Checkout nocobase/nocobase pr
        if: ${{ inputs.nocobase_pr_number != '' }}
        shell: bash
        run: |
          gh pr checkout ${{ inputs.nocobase_pr_number }}
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
      - name: Checkout pro-plugins
        uses: actions/checkout@v3
        with:
          repository: nocobase/pro-plugins
          ref: ${{ inputs.branch }}
          path: packages/pro-plugins
          fetch-depth: 0
          token: ${{ steps.app-token.outputs.token }}
      - name: Checkout pro-plugins pr
        if: ${{ inputs.pro_plugin == 'pro-plugins' && inputs.pro_pr_number != '' }}
        shell: bash
        run: |
          cd ./packages/pro-plugins/
          gh pr checkout ${{ inputs.pro_pr_number }}
          cd ../../
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
      - name: Clone pro repos
        shell: bash
        run: |
          for repo in ${{ join(fromJSON(steps.get-info.outputs.proRepos), ' ') }}
          do
          git clone -b ${{ inputs.branch }} https://x-access-token:${{ steps.app-token.outputs.token }}@github.com/nocobase/$repo.git packages/pro-plugins/@nocobase/$repo
          done
      - name: Clone pro repo
        shell: bash
        if: ${{ inputs.pro_plugin && inputs.pro_plugin != 'pro-plugins' }}
        run: |
          if [ ! -d "packages/pro-plugins/@nocobase/${{ steps.get-info.outputs.repository }}" ]; then
            git clone -b ${{ inputs.branch }} https://x-access-token:${{ steps.app-token.outputs.token }}@github.com/nocobase/${{ steps.get-info.outputs.repository }}.git packages/pro-plugins/@nocobase/${{ steps.get-info.outputs.repository }}
          fi
      - name: Checkout pro pr
        if: ${{ inputs.pro_plugin && inputs.pro_plugin != 'pro-plugins' && inputs.pro_pr_number != '' }}
        shell: bash
        run: |
          cd ./packages/pro-plugins/@nocobase/${{ steps.get-info.outputs.repository }}
          gh pr checkout ${{ inputs.pro_pr_number }}
          cd ../../../../
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
      - name: rm .git
        run: |
          rm -rf packages/pro-plugins/.git
          for repo in ${{ join(fromJSON(steps.get-info.outputs.proRepos), ' ') }}
          do
            rm -rf packages/pro-plugins/@nocobase/$repo/.git
          done
          if [ -d "packages/pro-plugins/@nocobase/${{ steps.get-info.outputs.repository }}/.git" ]; then
            rm -rf packages/pro-plugins/@nocobase/${{ steps.get-info.outputs.repository }}/.git
          fi
          git config --global user.email "you@example.com"
          git config --global user.name "Your Name" && git add -A && git commit -m "tmp commit"
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver-opts: network=host
      - name: Login to Aliyun Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.ALI_DOCKER_REGISTRY }}
          username: ${{ secrets.ALI_DOCKER_USERNAME }}
          password: ${{ secrets.ALI_DOCKER_PASSWORD }}
      - name: Set tags
        id: set-tags
        run: |
          echo "::set-output name=tags::${{ secrets.ALI_DOCKER_REGISTRY }}/nocobase/nocobase:${{ steps.get-info.outputs.imageTag }}"
      - name: Set variables
        run: |
          target_directory="./packages/pro-plugins/@nocobase"
          subdirectories=$(find "$target_directory" -mindepth 1 -maxdepth 1 -type d -exec basename {} \; | tr '\n' ' ')
          trimmed_variable=$(echo "$subdirectories" | xargs)
          packageNames="@nocobase/${trimmed_variable// / @nocobase/}"
          pluginNames="${trimmed_variable//plugin-/}"
          BEFORE_PACK_NOCOBASE="yarn add @nocobase/plugin-notifications @nocobase/plugin-disable-pm-add $packageNames -W --production"
          APPEND_PRESET_LOCAL_PLUGINS="notifications,disable-pm-add,${pluginNames// /,}"
          echo "var1=$BEFORE_PACK_NOCOBASE" >> $GITHUB_OUTPUT
          echo "var2=$APPEND_PRESET_LOCAL_PLUGINS" >> $GITHUB_OUTPUT
        id: vars
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          file: Dockerfile
          build-args: |
            VERDACCIO_URL=http://localhost:4873/
            COMMIT_HASH=${GITHUB_SHA}
            PLUGINS_DIRS=pro-plugins
            BEFORE_PACK_NOCOBASE=${{ steps.vars.outputs.var1 }}
            APPEND_PRESET_LOCAL_PLUGINS=${{ steps.vars.outputs.var2 }}
          push: true
          tags: ${{ steps.set-tags.outputs.tags }}
      - name: Deploy NocoBase
        env:
          IMAGE_TAG: nocobase/nocobase:${{ steps.get-info.outputs.imageTag }}
        run: |
          echo $IMAGE_TAG
          export APP_NAME=$(echo $IMAGE_TAG | cut -d ":" -f 2)
          echo $APP_NAME
          curl --retry 2 --location --request POST "${{secrets.NOCOBASE_DEPLOY_HOST}}$APP_NAME" \
            --header 'Content-Type: application/json' \
            -d "{
                \"tag\": \"$APP_NAME\",
                \"dialect\": \"postgres\"
            }"
      - name: Deploy NocoBase V2
        env:
          IMAGE_TAG: nocobase/nocobase:${{ steps.get-info.outputs.imageTag }}
        run: |
          echo $IMAGE_TAG
          export APP_NAME=$(echo $IMAGE_TAG | cut -d ":" -f 2)
          echo $APP_NAME
          curl --retry 2 --location --request POST "${{secrets.NOCOBASE_DEPLOY_HOST_V2}}$APP_NAME" \
            --header 'Content-Type: application/json' \
            -d "{
                \"tag\": \"$APP_NAME\",
                \"dialect\": \"postgres\"
            }"
      - name: Update success status
        if: always()
        run: |
          gh api -X PATCH /repos/nocobase/${{ steps.get-info.outputs.repository || 'nocobase' }}/check-runs/${{ inputs.checkRunId }} \
             -F 'status=completed' \
             -F 'conclusion=${{ job.status }}' \
             -F 'details_url=https://github.com/2013xile/nocobase-ci/actions/runs/${{ github.run_id }}'
        env: 
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
