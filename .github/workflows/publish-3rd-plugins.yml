name: Publish 3rd plugins

concurrency:
  group: ${{ github.workflow }}-${{ inputs.branch }}-${{ inputs.repository }}
  cancel-in-progress: true

run-name: ${{ inputs.branch }}-${{ inputs.repository }}

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'base branch'
        required: true
      repository:
        description: 'repo name'
        required: true

jobs:
  publish:
    runs-on: ubuntu-latest
    services:
      verdaccio:
        image: verdaccio/verdaccio:5
        ports:
          - 4873:4873
    steps:
      - name: Get info
        id: get-info
        run: |
          if [[ "${{ inputs.branch }}" == "main" ]]; then
            echo "defaultTag=$(echo 'latest')" >> $GITHUB_OUTPUT
            echo "nextBranch=$(echo 'next')" >> $GITHUB_OUTPUT
          elif [[ "${{ inputs.branch }}" == "next" ]]; then
            echo "defaultTag=$(echo 'beta')" >> $GITHUB_OUTPUT
            echo "nextBranch=$(echo 'develop')" >> $GITHUB_OUTPUT
          elif [[ "${{ inputs.branch }}" == "develop" ]]; then
            echo "defaultTag=$(echo 'alpha')" >> $GITHUB_OUTPUT
          else
            exit 1
          fi
      - uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ vars.NOCOBASE_APP_ID }}
          private-key: ${{ secrets.NOCOBASE_APP_PRIVATE_KEY }}
          owner: nocobase
          repositories: nocobase,${{ inputs.repository }}
          skip-token-revoke: true
      - name: Get GitHub App User ID
        id: get-user-id
        run: echo "user-id=$(gh api "/users/${{ steps.app-token.outputs.app-slug }}[bot]" --jq .id)" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
      - name: Setup
        run: |
          git config --global user.name '${{ steps.app-token.outputs.app-slug }}[bot]'
          git config --global user.email '${{ steps.get-user-id.outputs.user-id }}+${{ steps.app-token.outputs.app-slug }}[bot]@users.noreply.github.com>'
      - name: Checkout
        uses: actions/checkout@v3
        with:
          repository: nocobase/nocobase
          ref: ${{ inputs.branch }}
          token: ${{ steps.app-token.outputs.token }}
          submodules: true
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          repository: nocobase/${{ inputs.repository }}
          ref: ${{ inputs.branch }}
          path: packages/plugins/@${{ inputs.repository }}
          fetch-depth: 0
          token: ${{ steps.app-token.outputs.token }}
      - name: Pre merge
        if: ${{ steps.get-info.outputs.nextBranch }}
        run: |
          cd ./packages/plugins/@${{ inputs.repository }}
          git checkout ${{ inputs.branch }}
          git pull origin ${{ inputs.branch }}
          git checkout ${{ steps.get-info.outputs.nextBranch }}
          git merge ${{ inputs.branch }}
          git push origin ${{ steps.get-info.outputs.nextBranch }} --tags --atomic
          cd ../../../
      - name: yarn install and build
        run: |
          yarn config set registry https://registry.npmjs.org/
          yarn install
          yarn build packages/core
          yarn build packages/plugins/@${{ inputs.repository }}
      - name: Get version
        id: get-version
        run: |
          echo "version=$(jq -r '.version' ./lerna.json)" >> $GITHUB_OUTPUT
      - name: Update version
        run: |
          for plugin in ./packages/plugins/@${{ inputs.repository }}/*/; do
            if [[ "$plugin" == *plugin-* ]]; then
              echo "$plugin"
              cd "$plugin"
              yarn version --new-version ${{ steps.get-version.outputs.version }} --no-git-tag-version
              cd ../../../../
            fi
          done
      - name: Tag and push
        run: |
          cd ./packages/plugins/@${{ inputs.repository }}
          git add .
          git commit -m "chore(versions): ðŸ˜Š publish v${{ steps.get-version.outputs.version }}"
          git tag v${{ steps.get-version.outputs.version }}
          git push origin ${{ inputs.branch }} --atomic --tags
          cd ../../../
      - name: Merge
        if: ${{ steps.get-info.outputs.nextBranch }}
        run: |
          cd ./packages/plugins/@${{ inputs.repository }}
          git checkout ${{ steps.get-info.outputs.nextBranch }}
          git merge -X ours ${{ inputs.branch }} --no-edit
          git push origin ${{ steps.get-info.outputs.nextBranch }} --tags --atomic
          cd ../../../
      - name: Send curl request and parse response
        env:
          PKG_USERNAME: ${{ secrets.PKG_USERNAME }}
          PKG_PASSWORD: ${{ secrets.PKG_PASSWORD }}
        run: |
          mkdir git-ci-cache
          apt-get update && apt-get install -y jq
          response1=$(curl -s 'https://pkg.nocobase.com/-/verdaccio/sec/login' \
            -H 'content-type: application/json' \
            --data-raw '{"username":"'$PKG_USERNAME'","password":"'$PKG_PASSWORD'"}')
          token1=$(echo $response1 | jq -r '.token')
          response2=$(curl -s 'https://pkg-src.nocobase.com/-/verdaccio/sec/login' \
            -H 'content-type: application/json' \
            --data-raw '{"username":"'$PKG_USERNAME'","password":"'$PKG_PASSWORD'"}')
          token2=$(echo $response2 | jq -r '.token')
          echo "PKG_NOCOBASE_TOKEN=$token1" >> $GITHUB_ENV
          echo "PKG_SRC_NOCOBASE_TOKEN=$token2" >> $GITHUB_ENV
      - name: publish pkg.nocobase.com
        run: |
          npm config set //pkg.nocobase.com/:_authToken=${{ env.PKG_NOCOBASE_TOKEN }}
          for plugin in ./packages/plugins/@${{ inputs.repository }}/*/; do
            if [[ "$plugin" == *plugin-* ]]; then
              echo "$plugin"
              cd "$plugin"
              npm publish --registry https://pkg.nocobase.com --tag ${{ steps.get-info.outputs.defaultTag }}
              cd ../../../../
            fi    
          done
      - name: publish pkg-src.nocobase.com
        run: |
          FILES=$(find packages/plugins/@${{ inputs.repository }} -name .npmignore)
          CONTENT="/node_modules
          /docker
          /docs
          "
          echo $CONTENT
          for FILE in $FILES
          do
            echo "$CONTENT" > $FILE
          done
          npm config set //pkg-src.nocobase.com/:_authToken=${{ env.PKG_SRC_NOCOBASE_TOKEN }}
          for plugin in ./packages/plugins/@${{ inputs.repository }}/*/; do
            if [[ "$plugin" == *plugin-* ]]; then
              echo "$plugin"
              cd "$plugin"
              npm publish --registry https://pkg-src.nocobase.com --tag ${{ steps.get-info.outputs.defaultTag }}
              cd ../../../../
            fi
          done
